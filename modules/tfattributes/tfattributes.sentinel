# From config and plan so far

import "general-functions" as general
import "strings"
import "types"


## TO-DO: Temporarily, evaluate_attribute will have an argument for the import version to use, but this is TEMPORARY

### evaluate_attribute ###
# Evaluates an attribute
# In general, the attribute should be a top-level attribute of item, but
# we do special processing for attributes with form "config.x"
# `item` is the item with the attribute
# `attribute` is the attribute
func config_evaluate_attribute(item, attribute) {
  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  if length(attributes) > 2 {
    print("An attribute passed to evaluate_attribute can only have 1 or 2 fields")
    return null
  }

  if attributes[0] is "config" {
    config = item.config[attributes[1]] else {}
    if "constant_value" in config {
      # Found constant_value in config
      return config.constant_value
    } else if "references" in config {
      # Found references in config
      return config.references
    } else {
      # Did not find constant_value or references in config
      return null
    }
  } else {
    # Return the original attribute or the item
    return item[attribute]
  }
}

func plan_evaluate_attribute(r, attribute) {
  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  # Convert numeric strings to integers for indices
  if attributes[0] matches "^[0-9]+$" {
    a = int(attributes[0])
    # Make sure r is of type list
    if types.type_of(r) is not "list" {
      return undefined
    }
  } else {
    a = attributes[0]
  }

  # Append the current attribute to the resource instance
  if (types.type_of(r) is "map" and "change" in keys(r)) and (types.type_of(r.change) is "map" and "after" in keys(r.change)) {
    new_r = r.change.after[a] else null
  } else {
    new_r = r[a] else null
  }

  # Process based on length of attributes
  # being greater than or equal to 1
  if length(attributes) > 1 {
    # Strip first element from attributes
    attributes = attributes[1:length(attributes)]
    attribute = strings.join(attributes, ".")

    # Make recursive call 
    return evaluate_attribute(new_r, attribute)
  } else {
    # We reached the end of the attribute and can stop the
    # recursive calls and return the value of the attribute
    return new_r
  }
}

func state_evaluate_attribute(r, attribute) {

  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  # Convert numeric strings to integers for indices
  if attributes[0] matches "^[0-9]+$" {
    a = int(attributes[0])
    # Make sure r is of type list
    if types.type_of(r) is not "list" {
      return undefined
    }
  } else {
    a = attributes[0]
  }

  # Append the current attribute to the resource instance
  new_r = r[a] else null

  # Append the current attribute to the resource instance
  # We check if r is a map having `values` (also a map) and `module_address`, so
  # that filter functions can pass in `r` instead of `r.values`.
  # The extra check for `module_address` is meant to make sure that `r`
  # is really a resource from the tfstate/v2 resources collection rather than
  # some block which just happens to have a key called `values`.
  # An example of such a block is the `filters` block of the `aws_ami` data source.
  if types.type_of(r) is "map" and "values" in keys(r) and types.type_of(r.values) is "map" and "module_address" in keys(r) {
    new_r = r.values[a] else null
  } else {
    new_r = r[a] else null
  }

  # Process based on length of attributes
  # being greater than or equal to 1
  if length(attributes) > 1 {

    # Strip first element from attributes
    attributes = attributes[1:length(attributes)]
    attribute = strings.join(attributes, ".")

    # Make recursive call
    return evaluate_attribute(new_r, attribute)
  } else {

    # We reached the end of the attribute and can stop the
    # recursive calls and return the value of the attribute
    return new_r
  }
}

func evaluate_attribute(item, attribute) {
  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  if version is "config" {

    if length(attributes) > 2 {
      print("An attribute passed to evaluate_attribute can only have 1 or 2 fields")
      return null
    }

    if attributes[0] is "config" {
      config = item.config[attributes[1]] else {}
      if "constant_value" in config {
        # Found constant_value in config
        return config.constant_value
      } else if "references" in config {
        # Found references in config
        return config.references
      } else {
        # Did not find constant_value or references in config
        return null
      }
    } else {
      # Return the original attribute or the item
      return item[attribute]
    }
  } else if version is "plan" {

    # Convert numeric strings to integers for indices
    if attributes[0] matches "^[0-9]+$" {
      a = int(attributes[0])
      # Make sure item is of type list
      if types.type_of(item) is not "list" {
        return undefined
      }
    } else {
      a = attributes[0]
    }

    # Append the current attribute to the resource instance
    if (types.type_of(item) is "map" and "change" in keys(item)) and (types.type_of(item.change) is "map" and "after" in keys(item.change)) {
      new_r = item.change.after[a] else null
    } else {
      new_r = item[a] else null
    }

    # Process based on length of attributes
    # being greater than or equal to 1
    if length(attributes) > 1 {
      # Strip first element from attributes
      attributes = attributes[1:length(attributes)]
      attribute = strings.join(attributes, ".")

      # Make recursive call 
      return evaluate_attribute(new_r, attribute)
    } else {
      # We reached the end of the attribute and can stop the
      # recursive calls and return the value of the attribute
      return new_r
    }
  } else if version is "state" {

    # Convert numeric strings to integers for indices
    if attributes[0] matches "^[0-9]+$" {
      a = int(attributes[0])
      # Make sure r is of type list
      if types.type_of(r) is not "list" {
        return undefined
      }
    } else {
      a = attributes[0]
    }

    # Append the current attribute to the resource instance
    new_r = item[a] else null

    # Append the current attribute to the resource instance
    # We check if r is a map having `values` (also a map) and `module_address`, so
    # that filter functions can pass in `r` instead of `r.values`.
    # The extra check for `module_address` is meant to make sure that `r`
    # is really a resource from the tfstate/v2 resources collection rather than
    # some block which just happens to have a key called `values`.
    # An example of such a block is the `filters` block of the `aws_ami` data source.
    if types.type_of(item) is "map" and "values" in keys(item) and types.type_of(item.values) is "map" and "module_address" in keys(item) {
      new_r = item.values[a] else null
    } else {
      new_r = item[a] else null
    }

    # Process based on length of attributes
    # being greater than or equal to 1
    if length(attributes) > 1 {

      # Strip first element from attributes
      attributes = attributes[1:length(attributes)]
      attribute = strings.join(attributes, ".")

      # Make recursive call
      return evaluate_attribute(new_r, attribute)
    } else {

      # We reached the end of the attribute and can stop the
      # recursive calls and return the value of the attribute
      return new_r
    }
  }
}

## TO-DO: if given item's attribute is not in given list of allowed values, it's true, else false
## can be used by any import so need to fix up evaluate_attribute so it's not dependent, right?
## attribute_not_allowed
### attribute_not_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is not in a given list of allowed values (allowed).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# If you want to disallow null, include "null" in the list (forbidden).
func attribute_not_in_list(item, attr, allowed) { // TO-DO: Three use this function
  not_allowed = true
  val = evaluate_attribute(item, attr) else null
  if val is null {
    val = "null"
  }
  if types.type_of(val) in ["list", "map"] {
    for val as i, v {
      if v in allowed {
        return !not_allowed
      }
    }
  } else {
    if val not in allowed {
      return not_allowed
    } else {
      return !not_allowed
    }
  }
  return not_allowed
}

## TO-DO: If attribute is forbidden, returns true, else returns false
## attribute_is_forbidden
### attribute_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is in a given list of forbidden values (forbidden).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# If you want to disallow null, include "null" in the list (forbidden).
func attribute_in_list(item, attr, forbidden) { // TO-DO: Three use this function
  in_list = true
  val = evaluate_attribute(item, attr) else null
  if val is null {
    val = "null"
  }
  if types.type_of(val) in ["list", "map"] {
    for val as i, v {
      if v not in forbidden {
        return !in_list
      }
    }
  } else {
    if val in forbidden {
      return in_list
    } else {
      return !in_list
    }
  }
  return in_list
}

### attribute_does_not_match_regex ###
# Filter a list of items such as resources to those with a specified
# attribute (attr) that does not match a regular expression (expr).
# The parameter, attr, can only be a top-level attribute of items or
# an attribute in the form "config.x".
func attribute_does_not_match_regex(item, attr, expr) { // TO-DO: Three use this function, works the same, just have to change evaluate_attribute version param
  no_match = true
  val = evaluate_attribute(item, attr) else null
  if val is null {
    val = "null"
  } else {
    if types.type_of(val) in ["list", "map"] {
      for val as i, v {
        if v matches expr {
          return !no_match
        }
      }
    } else {
      if val not matches expr {
        return no_match
      } else {
        return !no_match
      }
    }
  }
  return no_match
}

### attribute_matches_regex ###
# Filter a list of items such as resources to those with a specified
# attribute (attr) that matches a regular expression (expr).
# The parameter, attr, can only be a top-level attribute of items or
# an attribute in the form "config.x".
# If you want to match null, set expr to "null".
func attribute_matches_regex(item, attr, expr) { // TO-DO: Three use this function
  match = true
  val = evaluate_attribute(item, attr) else null
  if val is null {
    val = "null"
  } else {
    if types.type_of(val) in ["list", "map"] {
      for val as i, v {
        if v not matches expr {
          return !match
        }
      }
    } else {
      if val matches expr {
        return match
      } else {
        return !match
      }
    }
  }
  return match
}

## BEGIN: TFPLAN

## TO-DO: Attribute is a list, and if it does not contain all the items in required, return true, else false
### attribute_not_contains_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that does not contain a given list of required values (required).
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_not_contains_list(resource, attr, required) { // TO-DO: Plan and state use this function, no differences
  not_contains = true
  v = evaluate_attribute(resource, attr) else null
  if v is null or not (types.type_of(v) is "list" or types.type_of(v) is "map") {
    return not_contains
  } else {
    missing_values = []
    for required as rv {
      if v not contains rv {
        append(missing_values, rv)
      }
    }
    if length(missing_values) > 0 {
      return not_contains
    }
  }
  return !not_contains
}

## TO-DO: If attribute contains anything forbidden, return true, else false
### attribute_contains_items_from_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that contains any items from a given list of
# forbidden values (forbidden).
# Resources should be derived by applying filters to tfplan.resource_changes.
# If you want to disallow null, include "null" in the list (forbidden).
func attribute_contains_items_from_list(resource, attr, forbidden) { // TO-DO: Plan and state use this function, no differences
  contains_items = true
  v = evaluate_attribute(resource, attr) else null
  if not (types.type_of(v) is "list" or types.type_of(v) is "map" or types.type_of(v) is "null") {
    return contains_items
  } else if v is null {
    if "null" in forbidden {
      return contains_items
    } // end else-if
  } else {
    forbidden_values = []
    for forbidden as fv {
      if v contains fv {
        append(forbidden_values, fv)
      } // end if
    } // end for
    if length(forbidden_values) > 0 {
      return contains_items
    } // end if
  } // end else
  return !contains_items
}

### attribute_contains_items_not_in_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that contains items not in a given list of allowed values.
# Resources should be derived by applying filters to tfplan.resource_changes.
# If you want to allow null, include "null" in the list (allowed).
func attribute_contains_items_not_in_list(resource, attr, allowed) { // TO-DO: Plan and state use this function, no differences
  contains_non_items = true
  val = evaluate_attribute(resource, attr) else null
  if not (types.type_of(val) is "list" or types.type_of(val) is "map" or types.type_of(val) is "null") {
    return contains_non_items
  } else if val is null {
    if "null" not in allowed {
      return contains_non_items
    }
  } else {
    forbidden_values = []
    for val as v {
      if v not in allowed {
        append(forbidden_values, v)
      }
    }
    if length(forbidden_values) > 0 {
      return contains_non_items
    }
  }
  return !contains_non_items
}

### attribute_is_not_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that does not have a given value.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_is_not_value(resource, attr, value) { // TO-DO: Plan and state use this function, no differences
  not_value = true
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    return not_value
  } else if v is not value {
    return not_value
  }
  return !not_value
}

### attribute_was_not_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that did not have a given value.
# Resources should be derived by applying filters to tfplan.resource_changes.
# If you want to match null, set value to "null".
# Note that it this function passes `rc.change.before` instead of `rc`
# to the evaluate_attribute() function which converts `rc` to `rc.change.after`.
func attribute_was_not_value(resource, attr, value) { // TO-DO: Plan only
  not_value = true
  v = evaluate_attribute(resource.change.before, attr) else null
  if v is null {
    v = "null"
  } else if v is not value {
    return not_value
  }
  return !not_value
}


## TO-DO: If attribute is value, return true, else false
### attribute_is_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that has a given value.
# Resources should be derived by applying filters to tfplan.resource_changes.
# If you want to match null, set value to "null".
func attribute_is_value(resource, attr, value) { // TO-DO: Plan and state use this function, no differences
  is_value = true
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    v = "null"
  }
  if v is value {
    return is_value
  }
  return !is_value
}

### attribute_was_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that had a given value.
# Resources should be derived by applying filters to tfplan.resource_changes.
# If you want to match null, set value to "null".
# Note that it this function passes `rc.change.before` instead of `rc`
# to the evaluate_attribute() function which converts `rc` to `rc.change.after`.
func attribute_was_value(resource, attr, value) { // TO-DO: Plan only
  was_value = true
  v = evaluate_attribute(resource.change.before, attr) else null
  if v is null {
    v = "null"
  }
  if v is value {
    return was_value
  }
  return !was_value
}

### attribute_greater_than_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is greater than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_greater_than_value(resource, attr, value) { // TO-DO: Plan and state use this function, no differences
  greater_than = true
  v = evaluate_attribute(resource, attr) else null
  if float(v) else null is null {
    return !greater_than
  } else if float(v) > value {
    return greater_than
  }
  return !greater_than
}

### attribute_greater_than_equal_to_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is greater than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_greater_than_equal_to_value(resource, attr, value) { // TO-DO: Plan only
  greater_than_equal = true
  v = evaluate_attribute(resource, attr) else null
  if float(v) else null is null {
    return !greater_than_equal
  } else if float(v) >= value {
    return greater_than_equal
  }
  return !greater_than_equal
}

### attribute_less_than_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is less than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_less_than_value(resource, attr, value) { // TO-DO: Plan and state use this function, no differences
  less_than = true
  v = evaluate_attribute(resource, attr) else null
  if float(v) else null is null {
    return !less_than
  } else if float(v) < value {
    return less_than
  }
  return !less_than
}

### attribute_less_than_equal_to_value ###
# Filter a list of resources to those with a specified
# attribute (attr) that is less than a given numeric value.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_less_than_equal_to_value(resource, attr, value) { // TO-DO: Plan only
  less_than_equal = true
  v = evaluate_attribute(resource, attr) else null
  if float(v) else null is null {
    return !less_than_equal
  } else if float(v) <= value {
    return less_than_equal
  }
  return !less_than_equal
}

### attribute_does_not_have_prefix ###
# Filter a list of resources to those with a specified
# attribute (attr) that does not have a given prefix.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_does_not_have_prefix(resource, attr, prefix) {
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    return true
  } else if not strings.has_prefix(v, prefix) {
    return true
  }
  return false
}

### attribute_has_prefix ###
# Filter a list of resources to those with a specified
# attribute (attr) that has a given prefix.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_has_prefix(resource, attr, prefix) {
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    return true
  } else if strings.has_prefix(v, prefix) {
    return true
  }
  return false
}

### attribute_does_not_have_suffix ###
# Filter a list of resources to those with a specified
# attribute (attr) that does not have a given suffix.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_does_not_have_suffix(resource, attr, suffix) {
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    return true
  } else if not strings.has_suffix(v, suffix) {
    return true
  }
  return false
}

### attribute_has_suffix ###
# Filter a list of resources to those with a specified
# attribute (attr) that has a given suffix.
# Resources should be derived by applying filters to tfplan.resource_changes.
func attribute_has_suffix(resource, attr, suffix) {
  v = evaluate_attribute(resource, attr) else null
  if v is null {
    return true
  } else if strings.has_suffix(v, suffix) {
    return true
  }
  return false
}

### attribute_map_key_contains_items_in_list ###
# Filter a list of resources to those with a specified map
# attribute (attr) with key (key) that contains items in a given list of forbidden values (forbidden). This list should have strings, numbers, or booleans.
# The key should either be a simple type like a string or number or a list.
# Resources should be derived by applying filters to tfplan.resource_changes.
# If the attribute is null or does not contain the key, no violation is generated.
func attribute_map_key_contains_items_in_list(resource, attr, key, forbidden) {
  # Evaluate the value (vals) of the attribute
  vals = evaluate_attribute(resource, attr) else null

  # Check if the attribute value is a map or is null.
  if not (types.type_of(vals) is "map" or types.type_of(vals) is "null") {
    return true
  } else if vals is not null {
    # Check if vals contains the desired key
    if key in keys(vals) {
      # Get the value of the key
      key_value = vals[key]

      forbidden_values = []
      if types.type_of(key_value) not in ["list", "map"] {
        if key_value in forbidden {
          append(forbidden_values, key_value)
        }
      } else if types.type_of(key_value) is "list" {
        for key_value as v {
          if v in forbidden {
            append(forbidden_values, v)
          } // end if v forbidden
        } // end for key_value
      } else if types.type_of(key_value) is "map" {
        # Ignore maps
      } // end key_value type

      if length(forbidden_values) > 0 {
        # Build warning message when vals is a map
        return true
      } // end length(forbidden_values)
    }
  } // end if not null

	return false
}

### attribute_map_key_contains_items_not_in_list ###
# Filter a list of resources to those with a specified map
# attribute (attr) key (key) that contains items not in a given list of allowed values (allowed).
# Resources should be derived by applying filters to tfplan.resource_changes.
# If the attribute is null or does not contain the key, no violation is generated.
func attribute_map_key_contains_items_not_in_list(resource, attr, key, allowed) {
  # Evaluate the value (vals) of the attribute
  vals = evaluate_attribute(resource, attr) else null

  # Check if the attribute value is a map or is null.
  if not (types.type_of(vals) is "map" or types.type_of(vals) is "null") {
    return true
  } else if vals is not null {
    # Check if vals contains the desired key
    if key in keys(vals) {
      # Get the value of the key
      key_value = vals[key]

      forbidden_values = []
      if types.type_of(key_value) not in ["list", "map"] {
        if key_value not in allowed {
          append(forbidden_values, key_value)
        }
      } else if types.type_of(key_value) is "list" {
        for key_value as v {
          if v not in allowed {
            append(forbidden_values, v)
          } // end if v not allowed
        } // end for key_value
      } else if types.type_of(key_value) is "map" {
          # Ignore maps
      } // end key_value type

      if length(forbidden_values) > 0 {
        return true
      } // end length(forbidden_values)
    }
  } // end if not null

	return false
}