# From config only so far

### evaluate_attribute ###
# Evaluates an attribute
# In general, the attribute should be a top-level attribute of item, but
# we do special processing for attributes with form "config.x"
# `item` is the item with the attribute
# `attribute` is the attribute
func evaluate_attribute(item, attribute) {
  # Split the attribute into a list, using "." as the separator
  attributes = strings.split(attribute, ".")

  if length(attributes) > 2 {
    print("An attribute passed to evaluate_attribute can only have 1 or 2 fields")
    return null
  }

  if attributes[0] is "config" {
    config = item.config[attributes[1]] else {}
    if "constant_value" in config {
      # Found constant_value in config
      return config.constant_value
    } else if "references" in config {
      # Found references in config
      return config.references
    } else {
      # Did not find constant_value or references in config
      return null
    }
  } else {
    # Return the original attribute or the item
    return item[attribute]
  }
}

### attribute_not_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is not in a given list of allowed values (allowed).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to disallow null, include "null" in the list (forbidden).
func attribute_not_in_list(items, attr, allowed, prtmsg) {
  violators = {}
  messages = {}

  # Iterate over items
  for items as index, item {
    val = evaluate_attribute(item, attr) else null
    # Check if the value is null
    if val is null {
      val = "null"
    }
    # Process lists and maps
    if types.type_of(val) in ["list", "map"] {
      message = ""
      # Check each item of list or map
      for val as i, v {
        if v not in allowed {
          # Add the item and a warning message to the violators list
          message = general.to_string(index) + " has " + general.to_string(attr) + " with value " +
                    general.to_string(v) + " that is not in the allowed list: " +
                    general.to_string(allowed)
        }
        if message is not "" {
          # Add the item and warning message to the violators list
          violators[index] = item
      		messages[index] = message
          if prtmsg {
            print(message)
          }
        } // end message not ""
      } // end for
    } else {
      # Process single item
      if val not in allowed {
        # Add the item and a warning message to the violators list
        message = general.to_string(index) + " has " + general.to_string(attr) +
                  " with value " + general.to_string(val) +
                  " that is not in the allowed list: " +
                  general.to_string(allowed)
        violators[index] = item
        messages[index] = message
        if prtmsg {
          print(message)
        }
      } // end if single item not matches
    } // end single item
  } // end for items
  return {"items": violators, "messages":messages}
}

### attribute_in_list ###
# Filter a list of items such as providers to those with a specified
# attribute (attr) that is in a given list of forbidden values (forbidden).
# The parameter, attr, can only be a top-level attribute of the collection, items.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to disallow null, include "null" in the list (forbidden).
func attribute_in_list(items, attr, forbidden, prtmsg) {
  violators = {}
  messages = {}

  # Iterate over items
  for items as index, item {
    val = evaluate_attribute(item, attr) else null
    # Check if the value is null
    if val is null {
      val = "null"
    }
    # Process lists and maps
    if types.type_of(val) in ["list", "map"] {
      message = ""
      # Check each item of list or map
      for val as i, v {
        if v in forbidden {
          # Add the item and a warning message to the violators list
          message = general.to_string(index) + " has " + general.to_string(attr) + " with value " +
                    general.to_string(v) + " that is in the forbidden list: " +
                    general.to_string(forbidden)
        }
        if message is not "" {
          # Add the item and warning message to the violators list
          violators[index] = item
      		messages[index] = message
          if prtmsg {
            print(message)
          }
        } // end message not ""
      } // end for
    } else {
      # Process single item
      if val in forbidden {
        # Add the item and a warning message to the violators list
        message = general.to_string(index) + " has " + general.to_string(attr) +
                  " with value " + general.to_string(val) +
                  " that is in the forbidden list: " +
                  general.to_string(forbidden)
        violators[index] = item
        messages[index] = message
        if prtmsg {
          print(message)
        }
      } // end if single item not matches
    } // end single item
  } // end for items

  return {"items": violators, "messages": messages}
}

### attribute_does_not_match_regex ###
# Filter a list of items such as resources to those with a specified
# attribute (attr) that does not match a regular expression (expr).
# The parameter, attr, can only be a top-level attribute of items or
# an attribute in the form "config.x".
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
func attribute_does_not_match_regex(items, attr, expr, prtmsg) {
  violators = {}
	messages = {}

  for items as index, item {
    val = evaluate_attribute(item, attr) else null
    if val is null {
      # Add the item and a warning message to the violators list
      message = general.to_string(index) + " has " + general.to_string(attr) +
                " that is null or undefined. " + "It is supposed to " +
                "match the regex " + general.to_string(expr)
      violators[index] = item
			messages[index] = message
      if prtmsg {
        print(message)
      }
    } else {
      # Process lists and maps
      if types.type_of(val) in ["list", "map"] {
        message = ""
        # Check each item of list or map
        for val as i, v {
          if v not matches expr {
            # Add to the warning message
            message += general.to_string(index) + " has " + general.to_string(attr) +
                      " with value " + general.to_string(v) +
                      " that does not match the regex " + general.to_string(expr) + "\n"
          }
          if message is not "" {
            # Add the item and warning message to the violators list
            violators[index] = item
      			messages[index] = message
            if prtmsg {
              print(message)
            }
          } // end message not ""
        } // end for
      } else {
        # Process single item
        if val not matches expr {
          # Add the item and a warning message to the violators list
          message = general.to_string(index) + " has " + general.to_string(attr) +
                    " with value " + general.to_string(val) +
                    " that does not match the regex " + general.to_string(expr)
          violators[index] = item
          messages[index] = message
          if prtmsg {
            print(message)
          }
        } // end if single item not matches
      } // end single item
    } // end not null
  } // end for items

  return {"items": violators, "messages": messages}
}

### attribute_matches_regex ###
# Filter a list of items such as resources to those with a specified
# attribute (attr) that matches a regular expression (expr).
# The parameter, attr, can only be a top-level attribute of items or
# an attribute in the form "config.x".
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to match null, set expr to "null".
func attribute_matches_regex(items, attr, expr, prtmsg) {
  violators = {}
	messages = {}

  for items as index, item {
    val = evaluate_attribute(item, attr) else null
    if val is null {
      val = "null"
    }
    # Process lists and maps
    if types.type_of(val) in ["list", "map"] {
      message = ""
      # Check each item of list or map
      for val as i, v {
        if v matches expr {
          # Add to the warning message
          message += general.to_string(index) + " has " + general.to_string(attr) +
                    " with value " + general.to_string(v) +
                    " that matches the regex " + general.to_string(expr) + "\n"
        }
        if message is not "" {
          # Add the item and warning message to the violators list
          violators[index] = item
          messages[index] = message
          if prtmsg {
            print(message)
          }
        } // end message not ""
      } // end for
    } else {
      # Process single item
      if val matches expr {
        # Add the item and a warning message to the violators list
        message = general.to_string(index) + " has " + general.to_string(attr) +
                  " with value " + general.to_string(val) +
                  " that matches the regex " + general.to_string(expr)
        violators[index] = item
        messages[index] = message
        if prtmsg {
          print(message)
        }
      } // end if single item not matches
    } // end single item
  } // end for items

  return {"items": violators, "messages": messages}
}

### get_module_source ###
# Get the module source from a module address
# Note that the module_address in many collections in the tfplan/v2, tfconfig/v2,
# and tfstate/v2 imports gives the labels used in the module blocks.
# For instance, a module_address like "module.A.module.B" means that the current
# item is in a module with label "B" that is a module with label "A". But that
# does not give you the source the module labeled "B".
# But if you want to limit creation of resources to specific modules based on
# their source, you need the module source.  This function computes it.
func get_module_source(module_address) {
  # Check for root module
  if module_address is "" {
    return "root"
  } else {
    # Find parent module
    module_segments = strings.split(module_address, ".")
    num_segments = length(module_segments)
    parent_module = strings.join(module_segments[0:num_segments-2], ".")
    current_module_name = module_segments[num_segments-1]

    # Find module call that called current module
    if parent_module is "" {
      # parent module is root module
      mc = tfconfig.module_calls[current_module_name]
    } else {
      # parent module is not root module
      mc = tfconfig.module_calls[parent_module + ":" + current_module_name]
    }

    # Set source from the module call
    module_source = mc.source

    return module_source
  }
}

### get_ancestor_module_source ###
# Get the module source of the first ancestor module from a module address that
# is not a local module (one having source starting with "./" or "../").
# Note that the module_address in many collections in the tfplan/v2, tfconfig/v2,
# and tfstate/v2 imports gives the labels used in the module blocks.
# For instance, a module_address like "module.A.module.B" means that the current
# item is in a module with label "B" that is a module with label "A". But that
# does not give you the source the module labeled "B".
# But if you want to limit creation of resources to specific modules based on
# their source, you need the module source.  This function computes it for
# the first ancestor module that is not a local module.
func get_ancestor_module_source(module_address) {
  # Check for root module
  if module_address is "" {
    return "root"
  } else {
    # Find parent module
    module_segments = strings.split(module_address, ".")
    num_segments = length(module_segments)
    parent_module = strings.join(module_segments[0:num_segments-2], ".")
    current_module_name = module_segments[num_segments-1]

    # Find module call that called current module
    if parent_module is "" {
      # parent module is root module
      mc = tfconfig.module_calls[current_module_name]
    } else {
      # parent module is not root module
      mc = tfconfig.module_calls[parent_module + ":" + current_module_name]
    }

    # Set source from the module call
    module_source = mc.source

    # Check to see if current module source is a nested module
    if strings.has_prefix(module_source, "./") or strings.has_prefix(module_source, "../") {
      return get_ancestor_module_source(parent_module)
    } else {
      return module_source
    }
  }
}

### get_parent_module_address ###
# Get the address of the parent module of a module from the module address
# return "root" if the given module_address is "" (the root module).
func get_parent_module_address(module_address) {
  # Check for root module
  if module_address is "" {
    return "root"
  } else {
    # Find parent module
    module_segments = strings.split(module_address, ".")
    num_segments = length(module_segments)
    parent_module = strings.join(module_segments[0:num_segments-2], ".")
    current_module_name = module_segments[num_segments-1]

    return parent_module
  }
}