# This policy uses the Sentinel tfstatev2 import to restrict the owners set on
# all instances of the aws_ami data source in all modules

# Import common-functions/tfstate-functions/tfstate-functions.sentinel
# with alias "state"
import "tfstate-functions" as state
import "tfstate/v2" as tfstate
import "general-functions" as general
import "evaluating-functions" as eval
import "collection"


# Allowed Owners
# Include "null" to allow missing or computed values
allowed_owners = ["self", "099720109477", "099720109478"]

# Get all AMIs
allAMIs = state.datasources(tfstate.resources, "aws_ami")

# Filter to AMIs with violations
# Warnings will be printed for all violations since the last parameter is true
violatingAMIs = collection.reduce(allAMIs, func(result, rc) {
  if eval.attribute_contains_items_not_in_list(rc, "owners", allowed_owners) is true {
    append(result, rc)
  }
  return result
}, [])

# Main rule
main = rule {
  length(violatingAMIs) is 0
}
