# This policy uses the Sentinel tfplan/v2 import to require that
# all Azure VMs have a source image id that matches a regex expression

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "tfplan/v2" as tfplan
import "collection"
import "evaluating-functions" as eval

# Image ID Regex
# Include "null" to allow missing or computed values
image_id_regex = "^(/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/(.*)/providers/Microsoft.Compute/images/(.*)|null)$"

# Get all Azure VMs using azurerm_virtual_machine
allAzureVMs = plan.resources(tfplan.resource_changes, "azurerm_virtual_machine")

# Filter to Azure VMs with violations that use azurerm_virtual_machine
# Warnings will be printed for all violations since the last parameter is true
violatingAzureVMs = collection.reduce(allAzureVMs, func(result, rc) {
  if eval.attribute_does_not_match_regex(rc, "storage_image_reference.0.id", image_id_regex) is true {
    append(result, rc)
  }
  return result
}, [])

# Get all Azure VMs using azurerm_windows_virtual_machine
allAzureWindowsVMs = plan.resources(tfplan.resource_changes, "azurerm_windows_virtual_machine")

# Filter to Azure VMs with violations that use azurerm_windows_virtual_machine
# Warnings will be printed for all violations since the last parameter is true
violatingAzureWindowsVMs = collection.reduce(allAzureWindowsVMs, func(result, rc) {
  if eval.attribute_does_not_match_regex(rc, "source_image_id", image_id_regex) is true {
    append(result, rc)
  }
  return result
}, [])

# Get all Azure VMs using azurerm_linux_virtual_machine
allAzureLinuxVMs = plan.resources(tfplan.resource_changes, "azurerm_linux_virtual_machine")

# Filter to Azure VMs with violations that use azurerm_linux_virtual_machine
# Warnings will be printed for all violations since the last parameter is true
violatingAzureLinuxVMs = collection.reduce(allAzureLinuxVMs, func(result, rc) {
  if eval.attribute_does_not_match_regex(rc, "source_image_id", image_id_regex) is true {
    append(result, rc)
  }
  return result
}, [])

# Main rule
violations = length(violatingAzureVMs) +
             length(violatingAzureWindowsVMs) +
             length(violatingAzureLinuxVMs)

main = rule {
  violations is 0
}
